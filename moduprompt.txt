Goal: In repo Myke247/MGTools, mark PRs #6–#19 ready, enable auto-merge (Squash) on each in order, then (optionally) open the Live-Beta → main PR. Use GitHub CLI if available; otherwise fall back to giving me clickable links.

Do this now (no questions, no confirmations):

Preflight

Detect gh; if missing, output the manual links list (M1→M14) and stop.

If gh exists but not authenticated, run gh auth status and prompt me to authenticate once, then continue.

Merge stack PRs (M1→M14)

Repository: Myke247/MGTools

PR numbers (in order): 6 7 8 9 10 11 12 13 14 15 16 17 18 19

For each PR:

Mark Ready for review: gh pr ready <num> --repo Myke247/MGTools || true

Add labels (ignore if missing): gh pr edit <num> --repo Myke247/MGTools --add-label phase2 --add-label modularization || true

Enable auto-merge (Squash): gh pr merge <num> --repo Myke247/MGTools --auto --squash

After each command, print a short status line with PR number and action done.

Wait for the chain to complete

Poll every 10s: gh pr view <num> --repo Myke247/MGTools --json state,mergeStateStatus

Consider a PR “done” when state=MERGED. Only then proceed to the next PR in the list.

If auto-merge isn’t allowed on this repo, fall back to gh pr merge <num> --squash --merge once checks pass.

Create Live-Beta → main PR (draft) when M14 is merged

Create PR with release notes body (use the v3.0.0 notes I provided earlier):

REPO=Myke247/MGTools
BODY_FILE=$(mktemp)
cat > "$BODY_FILE" <<'MD'
(paste the v3.0.0 release notes here)
MD
URL=$(gh pr create --repo "$REPO" --base main --head Live-Beta \
      --title "MGTools v3.0.0 — Phase 2 Modularization (merge Live-Beta → main)" \
      --label phase2 --label modularization \
      --draft --body-file "$BODY_FILE")
echo "Created Live-Beta → main PR: $URL"


Then enable auto-merge (squash) on that PR number:

PRNUM=$(basename "$URL")
gh pr merge "$PRNUM" --repo "$REPO" --auto --squash || true


Final output

Print a compact table showing each PR number, final state, and URL.

If gh was missing, print the manual links list for me to click:

#6 https://github.com/Myke247/MGTools/pull/6

#7 https://github.com/Myke247/MGTools/pull/7

#8 https://github.com/Myke247/MGTools/pull/8

#9 https://github.com/Myke247/MGTools/pull/9

#10 https://github.com/Myke247/MGTools/pull/10

#11 https://github.com/Myke247/MGTools/pull/11

#12 https://github.com/Myke247/MGTools/pull/12

#13 https://github.com/Myke247/MGTools/pull/13

#14 https://github.com/Myke247/MGTools/pull/14

#15 https://github.com/Myke247/MGTools/pull/15

#16 https://github.com/Myke247/MGTools/pull/16

#17 https://github.com/Myke247/MGTools/pull/17

#18 https://github.com/Myke247/MGTools/pull/18

#19 https://github.com/Myke247/MGTools/pull/19

Live-Beta → main compare: https://github.com/Myke247/MGTools/compare/main...Live-Beta

Shell commands you may use:

# Check CLI and auth
which gh || echo "NO_GH"
gh auth status || gh auth login

# Ready/label/auto-merge for each PR
REPO=Myke247/MGTools
for p in 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
  echo "=== PR #$p ==="
  gh pr ready "$p" --repo "$REPO" || true
  gh pr edit  "$p" --repo "$REPO" --add-label phase2 --add-label modularization || true
  gh pr merge "$p" --repo "$REPO" --auto --squash || true
  # Poll until merged
  while true; do
    json=$(gh pr view "$p" --repo "$REPO" --json state,mergeStateStatus 2>/dev/null || echo '{}')
    state=$(node -e "try{console.log(JSON.parse(process.argv[1]).state||'');}catch(e){console.log('');}" "$json")
    [ "$state" = "MERGED" ] && break
    sleep 10
  done
done