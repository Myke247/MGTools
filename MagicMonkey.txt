"Create a comprehensive, step-by-step development plan for building a cross-browser browser extension called MagicMonkey. This extension will serve Magic Garden users by running userscripts for game automation and UI enhancements. It must be compatible with Chrome, Firefox, Edge, and other major browsers on both desktop and mobile devices where API support permits.

MagicMonkey should include these core features:

Auto-update of userscripts directly from GitHub repositories on new pushes/releases.

Persistent storage for script data using browser extension storage APIs or GM_* equivalent.

Script management UI similar in ease-of-use and functionality to Violentmonkey, including enabling/disabling scripts.

Cross-browser compatibility using WebExtensions API and polyfills as needed.

Loading and injecting userscripts with correct permissions, match patterns, and run timing.

Methods for syncing user data or scripts via cloud options or integrated storage.

Clear instructions and fallback mechanisms for browsers with API limitations.

The plan should cover:

Project structure and scaffolding (manifest files, directory layout, build system).

Essential extension components to develop (background/service worker, content scripts, popup UI).

Integration of auto-update mechanism from GitHub script repositories.

Persistent storage design options (chrome.storage, IndexedDB, or alternatives).

Handling cross-browser API inconsistencies and polyfill strategies.

Testing strategy across browsers and devices, including automated tests or CI/CD pipeline ideas.

Packaging for distribution on browser stores and updating processes.

Developer and user documentation requirements.

How to integrate Claude Code and Sonnet AI workflows to automate code generation, bug fixing, testing, and iterative improvement in one shot.

Make the plan detailed enough to guide a full development workflow from initial setup through deployment with minimal manual rework, leveraging AI tools for automation wherever possible."

