# MGTools Fix Implementation Plan (FINAL - FOR SONNET EXECUTION)
# Generated by Claude Opus for Sonnet Implementation
# Date: 2025-10-20
# Target: MGTools.user.js (Live-Beta branch)
# Working Directory: C:\Users\MLvP3\ClaudeProjectRepo

## CRITICAL CONTEXT FOR SONNET
After context swap, you are implementing 8 specific fixes to MGTools.user.js.
Reference Issue2_FunctionTrace.md for detailed multi-harvest fix implementation.
ALL work in local folder ONLY - NO GitHub operations.

## EXECUTION RULES
1. Work in C:\Users\MLvP3\ClaudeProjectRepo ONLY
2. NO GitHub pushes or commits until approved
3. NO version bumps or CHANGELOG version tags
4. Keep existing ESLint/Prettier setup
5. Format ONLY changed lines
6. NO co-authored-by trailers
7. Use module paths/anchors, NOT line numbers

## WINDOWS COMMANDS
```cmd
# Syntax check
node -e "require('./MGTools.user.js')"
eslint MGTools.user.js

# Backup
git add -N MGTools.user.js
git diff MGTools.user.js > backup_$(date +%Y%m%d_%H%M%S).patch

# Restore
git checkout -- MGTools.user.js
```

## GLOBAL SETUP

### Add Debug Flag (Once)
```javascript
// Search: "FLAGS: {"
// Add inside FLAGS object:
FIX_VALIDATION: false  // Temporary for testing, remove before release
```

### Define Target Context (Use in All Fixes)
```javascript
const targetWindow   = typeof unsafeWindow !== 'undefined' ? unsafeWindow : window;
const targetDocument = targetWindow.document;

// Polyfill for older embeds
const qmt = typeof queueMicrotask === 'function'
  ? queueMicrotask
  : (fn) => Promise.resolve().then(fn);
```

================================================================================
## ISSUE 1: Remove Duplicate Notifications Button
================================================================================

### Analysis
- Two controls exist: button AND checkbox for same setting
- KEEP: checkbox (canonical, consistent with other settings)
- REMOVE: button and ALL references

### Implementation

#### Step 1: Remove Button from UI
Search: `<!-- Notifications Toggle -->`
BEFORE:
```javascript
<div class="setting-item">
  <label>Notifications</label>
  <button id="notifications-button">Toggle</button>
  <input type="checkbox" id="notifications-checkbox">
</div>
```
AFTER:
```javascript
<div class="setting-item">
  <label>Notifications</label>
  <input type="checkbox" id="notifications-checkbox">
</div>
```

#### Step 2: Remove Button Event Listeners
Search for ALL occurrences of:
- `notifications-button`
- `getElementById('notifications-button')`
- `#notifications-button`

Remove entire addEventListener blocks and any CSS selectors referencing the button.

#### Step 3: Verify Checkbox Handler Remains
Ensure checkbox handler still updates: `UnifiedState.data.settings.notifications`
Storage key unchanged.

### Acceptance Tests
1. Settings shows single checkbox for notifications
2. No console errors about missing button
3. Toggle persists across reload
4. Test in Discord browser + desktop

### Rollback
```cmd
git checkout -- MGTools.user.js
```

================================================================================
## ISSUE 2: Multi-harvest Slot Value Update - Sync From Game
================================================================================

### SEE Issue2_FunctionTrace.md FOR COMPLETE IMPLEMENTATION

### Summary
After multi-harvest, sync slot index from game's Jotai atom instead of simulating keys.

### Quick Implementation

#### Step 1: Add Helper Functions
Near `updateSlotIndex` function, add ALL functions from Issue2_FunctionTrace.md:
- `findAtom()` - Robust atom finder
- `readAtomValue()` - Safe atom reader
- `setSlotIndex()` - Centralized state setter
- `syncSlotIndexFromGame()` - Main sync function

#### Step 2: Modify Harvest Handler
Search: `"âœ… ALLOWED HarvestCrop"`
Add after that line:
```javascript
// Check for multi-harvest
const isMultiHarvest = slotData?.harvestsRemaining > 1 ||
                      slotData?.maxHarvests > 1;

if (isMultiHarvest) {
  const preHarvestIndex = window._mgtools_currentSlotIndex || 0;

  qmt(() => {
    const newIndex = syncSlotIndexFromGame();

    if (CONFIG.DEBUG.FLAGS.FIX_VALIDATION) {
      console.log('[FIX_HARVEST] Multi-harvest sync:', {
        preHarvest: preHarvestIndex,
        postHarvest: newIndex,
        changed: newIndex !== null
      });
    }
  });
}
```

### Acceptance Tests
1. Multi-harvest crop advances slot value correctly
2. NO double-cycling (one advance only)
3. Last slot wraps to first
4. IME composition doesn't interfere

================================================================================
## ISSUE 3: Discord Environment Compatibility
================================================================================

### Implementation

#### Enhance Detection
Search: `CompatibilityMode`
Within CompatibilityMode initialization, AFTER `const isDiscordHost`:
```javascript
// Narrow Discord detection
const isDiscordHost = window.location.hostname === 'discord.com' ||
                     window.location.hostname === 'discordsays.com';
const isDiscordDesktop = typeof window.DiscordNative !== 'undefined';
const inDiscordIframe = window !== window.top &&
                       document.referrer?.includes('discord');

if (CONFIG.DEBUG.FLAGS.FIX_VALIDATION) {
  console.log('[FIX_DISCORD]', {
    host: isDiscordHost,
    desktop: isDiscordDesktop,
    iframe: inDiscordIframe,
    scope: typeof unsafeWindow !== 'undefined' ? 'unsafeWindow' : 'window'
  });
}

/**
 * Discord CSP Constraints:
 * - No external stylesheets (Google Fonts blocked)
 * - Limited fetch (use GM_xmlhttpRequest)
 * - Storage fallback to sessionStorage/memory
 * - Scope bridging via unsafeWindow when available
 */
```

### Acceptance Tests
1. Core features work in Discord browser
2. Core features work in Discord desktop
3. Storage persists appropriately
4. No CSP violations in console

================================================================================
## ISSUE 4: Animation Toggle - TWO OPTIONS
================================================================================

### Inventory First
Search for ALL occurrences of:
- `animationEnabled`
- `animation-toggle`
- `animation-checkbox`
- `settings.animation`

### OPTION A: Remove Animation Toggle (RECOMMENDED)

#### Remove UI
Search: `<!-- Animation Toggle -->`
Remove entire div block

#### Remove Handlers
Remove all addEventListener for animation-toggle/animation-checkbox

#### Add Migration
After Storage initialization:
```javascript
// Clean deprecated animation key
if (Storage.get('animationEnabled') !== undefined) {
  Storage.remove('animationEnabled');
  if (CONFIG.DEBUG.FLAGS.FIX_VALIDATION) {
    console.log('[FIX_ANIMATION] Removed deprecated animationEnabled');
  }
}
```

#### Add No-op Shims
Replace any `Storage.get('animationEnabled')` with `false`

### OPTION B: Fix Animation Toggle

#### Identify What It Affects
Document what animations it actually controls

#### Fix Toggle Logic
Ensure toggle actually affects those animations

#### Persist State
```javascript
Storage.set('animationEnabled', checkbox.checked);
```

### Decision Required
**WAIT FOR USER TO CHOOSE A OR B**

================================================================================
## ISSUE 5: Ability Logs Filter - Data Layer Fix
================================================================================

### Implementation

#### Step 1: Add In-Memory Buffer
Search: `// Ability logs` or ability module initialization
Add:
```javascript
const abilityLogBuffer = [];  // All events, unfiltered
const MAX_LOG_ENTRIES = 1000; // Prevent memory leak

function logAbilityEvent(event) {
  // Always capture
  abilityLogBuffer.push({
    timestamp: Date.now(),
    category: event.category,
    message: event.message,
    data: event.data
  });

  // Trim if needed
  if (abilityLogBuffer.length > MAX_LOG_ENTRIES) {
    abilityLogBuffer.shift();
  }

  // Render based on current filters
  renderFilteredLogs();
}
```

#### Step 2: Replace CSS Toggle with Data Render
Search: `"Filter ${filterKey} changed"`
Replace CSS toggling with:
```javascript
function renderFilteredLogs() {
  const container = document.querySelector('.ability-logs-container');
  if (!container) return;

  const activeFilters = getActiveFilters();
  const filteredLogs = abilityLogBuffer.filter(log =>
    activeFilters.includes(log.category)
  );

  // Clear and re-render
  container.innerHTML = '';
  filteredLogs.forEach(log => {
    const entry = createLogEntry(log);
    container.appendChild(entry);
  });

  if (CONFIG.DEBUG.FLAGS.FIX_VALIDATION) {
    console.log('[FIX_LOGS] Rendered', filteredLogs.length, 'of', abilityLogBuffer.length);
  }
}
```

### Acceptance Tests
1. Disable "Other" filter
2. Trigger Seed Finder events
3. Enable "Other" filter
4. Past events appear with timestamps

================================================================================
## ISSUE 6: Storage Audit with Safe Migration
================================================================================

### Implementation

#### Step 1: Define Schema
After Storage module:
```javascript
const STORAGE_SCHEMA = {
  'mgtools_settings': { type: 'object', default: {} },
  'mgtools_customRooms': { type: 'array', default: [] },
  'mgtools_watchedSeeds': { type: 'array', default: [] },
  '_deprecated': ['animationEnabled', 'oldNotificationFormat'],
  '_mgtools_schema_version': { type: 'number', default: 1 }
};
```

#### Step 2: Safe Migration with Storage Adapter
```javascript
function migrateStorage(dryRun = true) {
  const changes = [];

  // Use Storage adapter, not localStorage directly
  STORAGE_SCHEMA._deprecated.forEach(key => {
    if (Storage.get(key) !== undefined) {
      changes.push({ action: 'remove', key });
      if (!dryRun) Storage.remove(key);
    }
  });

  // Add defaults
  Object.entries(STORAGE_SCHEMA).forEach(([key, schema]) => {
    if (key !== '_deprecated' && Storage.get(key) === undefined) {
      changes.push({ action: 'add', key, value: schema.default });
      if (!dryRun) Storage.set(key, schema.default);
    }
  });

  if (CONFIG.DEBUG.FLAGS.FIX_VALIDATION || dryRun) {
    console.log('[FIX_STORAGE]', dryRun ? 'DRY RUN' : 'EXECUTED', changes);
  }

  return changes;
}

// In initialization:
migrateStorage(true);  // Dry run only
// migrateStorage(false); // Execute after user approval
```

### Acceptance Tests
1. Dry run shows proposed changes
2. Deprecated keys removed after migration
3. Defaults applied for missing keys
4. Works in Discord contexts

================================================================================
## ISSUE 7: Hotkeys Focus Gating - Pure Predicate
================================================================================

### Implementation

#### Step 1: Create Pure Predicate
Replace entire `isTypingInInput` function:
```javascript
function shouldBlockHotkey(event) {
  const active = document.activeElement;
  if (!active) return false;

  // Basic input elements
  const tagName = active.tagName?.toLowerCase();
  if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {
    return true;
  }

  // Contenteditable
  if (active.contentEditable === 'true' || active.isContentEditable) {
    return true;
  }

  // ARIA role
  if (active.getAttribute('role') === 'textbox') {
    return true;
  }

  // Shadow DOM traversal
  if (event && event.composedPath) {
    const path = event.composedPath();
    for (const element of path) {
      if (!element.tagName) continue;

      const tag = element.tagName.toLowerCase();
      if (tag === 'input' || tag === 'textarea' || tag === 'select') {
        return true;
      }

      if (element.contentEditable === 'true' ||
          element.getAttribute?.('role') === 'textbox') {
        return true;
      }
    }
  }

  // Discord chat detection
  const discordSelectors = [
    '.chat-input-container',
    '[class*="textArea"]',
    '[class*="slateTextArea"]',
    '.markup-input'
  ];

  for (const selector of discordSelectors) {
    try {
      const chatElement = document.querySelector(selector);
      if (chatElement && chatElement.contains(active)) {
        return true;
      }
    } catch {}
  }

  return false;
}
```

#### Step 2: Fix Handler Flow
In hotkey handler:
```javascript
// CORRECT flow - no preventDefault when blocked
if (shouldBlockHotkey(e)) {
  // Let typing happen, no preventDefault
  return;
}

// Only preventDefault when actually handling a hotkey
if (matchedHotkey) {
  e.preventDefault();
  // Handle hotkey...
}
```

### Acceptance Tests
1. Type 'o' in chat â†’ types character
2. Press 'o' in game â†’ triggers preset
3. Test in Discord chat
4. IME composition works

================================================================================
## ISSUE 8: Custom Rooms Player Count - Module-Level Registry
================================================================================

### Implementation

#### Step 1: Add Module-Level Registry
Near room polling code (NOT window global):
```javascript
// Module-level room registry
const customRoomRegistry = new Set();
```

#### Step 2: Modify Add Room
Search: `customRooms.push(roomCode)`
After that line:
```javascript
// Register with module-level poller
customRoomRegistry.add(roomCode);

// Ensure main poll includes it
if (typeof updateRoomStatusDisplay === 'function') {
  updateRoomStatusDisplay();
}

if (CONFIG.DEBUG.FLAGS.FIX_VALIDATION) {
  console.log('[FIX_ROOMS] Added to polling:', roomCode);
}
```

#### Step 3: Modify Remove Room
Search: `customRooms.filter(code => code !== roomCode)`
After that line:
```javascript
// Unregister from poller
customRoomRegistry.delete(roomCode);

if (CONFIG.DEBUG.FLAGS.FIX_VALIDATION) {
  console.log('[FIX_ROOMS] Removed from polling:', roomCode);
}
```

#### Step 4: Update Main Poll Loop
In room polling loop, ensure it reads:
```javascript
const allRooms = [...defaultRooms, ...UnifiedState.data.customRooms];
const uniqueRooms = [...new Set(allRooms)];
// Poll uniqueRooms
```

### Acceptance Tests
1. Add custom room
2. Player count updates within 30s
3. Remove room - polling stops
4. No duplicate API calls

================================================================================
## TESTING MATRIX
================================================================================

| Issue | Browser | Discord Browser | Discord Desktop | IME Test |
|-------|---------|----------------|-----------------|----------|
| 1     | âœ“       | âœ“              | âœ“               | N/A      |
| 2     | âœ“       | âœ“              | âœ“               | âœ“        |
| 3     | N/A     | CRITICAL       | CRITICAL        | N/A      |
| 4     | âœ“       | âœ“              | âœ“               | N/A      |
| 5     | âœ“       | âœ“              | âœ“               | N/A      |
| 6     | âœ“       | CRITICAL       | CRITICAL        | N/A      |
| 7     | âœ“       | CRITICAL       | CRITICAL        | âœ“        |
| 8     | âœ“       | âœ“              | âœ“               | N/A      |

IME Test: Type in chat while feature active, ensure no interference

================================================================================
## DOCUMENTATION (Proposed Only - NO VERSION TAG)
================================================================================

### CHANGELOG.md Notes
```markdown
### Fixed
- Removed duplicate Notifications button in Settings (kept checkbox)
- Multi-harvest slot values now sync correctly after auto-cycle
- Enhanced Discord environment detection and compatibility
- [Animation toggle - pending decision]
- Ability Logs filters properly backfill from memory buffer
- Storage layer migration with deprecated key cleanup
- Hotkeys correctly blocked in all text input contexts including shadow DOM
- Custom Rooms player counts update via main polling system

### Technical
- Added robust Jotai atom access helpers
- Improved focus detection with composedPath support
- Storage migration system with dry-run capability
```

### MODULARIZATION_PROGRESS.md Notes
```markdown
### Fixes Applied (2025-10-20)
- Settings UI: Removed duplicate controls
- Hotkeys: Enhanced focus gating with shadow DOM
- Rooms: Integrated custom rooms into existing poller
- Storage: Added migration system with schema
- Compatibility: Enhanced Discord detection
- Values: Sync from game state for multi-harvest
```

================================================================================
## FINAL CHECKLIST FOR SONNET
================================================================================

Before starting:
[ ] Confirm working in C:\Users\MLvP3\ClaudeProjectRepo
[ ] Create backup with timestamp
[ ] Add DEBUG.FIX_VALIDATION flag (default false)

For each issue:
[ ] Make changes as specified
[ ] Run syntax check: node -e "require('./MGTools.user.js')"
[ ] Run eslint: eslint MGTools.user.js
[ ] Test core functionality
[ ] Test in Discord if applicable
[ ] Check for console errors

After all fixes:
[ ] Remove or set FIX_VALIDATION to false
[ ] Run full test matrix
[ ] Document any issues found
[ ] Wait for approval before any Git operations

================================================================================
## IMPORTANT NOTES
================================================================================

1. Issue 2 has detailed implementation in Issue2_FunctionTrace.md
2. Issue 4 requires user decision (remove vs fix)
3. All console.log statements must check FIX_VALIDATION flag
4. Use targetWindow/targetDocument consistently
5. Use qmt() instead of queueMicrotask directly
6. NO direct window._mgtools_* writes - use setters
7. Test IME composition for Issues 2 and 7

This plan is ready for Sonnet execution.
Total fixes: 8 (7 implemented, 1 pending decision)
Estimated time: 2-3 hours with testing
All changes isolated and reversible

================================================================================